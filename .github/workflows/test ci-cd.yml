name: CI/CD - Microservices Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code from repository
        uses: actions/checkout@v3

      - name: Build Docker images for all microservices
        run: docker compose -f docker-compose.yml build --parallel
        env:
          DOCKER_BUILDKIT: 1

      - name: Create environment variables file
        run: |
          echo "JWT_SECRET=danhcubade" >> .env.ci
          echo "MONGODB_PRODUCT_URI=mongodb://docongdanh:mongodb123@danh_mongodb:27017/product_db?authSource=admin" >> .env.ci
          echo "MONGODB_ORDER_URI=mongodb://docongdanh:mongodb123@danh_mongodb:27017/order_db?authSource=admin" >> .env.ci
          echo "MONGODB_AUTH_URI=mongodb://docongdanh:mongodb123@danh_mongodb:27017/auth_db?authSource=admin" >> .env.ci

      - name: Start all Docker containers
        run: docker compose --env-file .env.ci -f docker-compose.yml up -d
      
      - name: Wait for services startup and configure MongoDB
        run: |
          sleep 11
          docker exec danh_mongodb mongosh -u docongdanh -p mongodb123 --authenticationDatabase admin --eval "
            db = db.getSiblingDB('auth_db');
            db.createCollection('users');
            db.users.insertOne({username: 'testuser', password: '\$2a\$10\$zQX8Z2jxKZ8Kq7X7Z8Z8ZeZ8Z8Z8Z8Z8Z8Z8Z8Z8Z8Z8Z8Z8Z'});
          " || true
          sleep 11

      - name: Run unit tests
        run: docker exec danh_product_service npm test

      - name: Stop and remove containers after testing
        run: docker compose -f docker-compose.yml down

  deploys:
    runs-on: ubuntu-latest
    needs: build-and-run

    steps:
      - name: Checkout source code from repository
        uses: actions/checkout@v3

      - name: Step 2 - Rebuild Docker images for deployment
        run: docker compose -f docker-compose.yml build --parallel
        env:
          DOCKER_BUILDKIT: 1

      - name: Login to Docker Hub registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push images to Docker Hub
        env:
          DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}
        run: |
          SERVICES=("danh_api_gateway" "danh_auth_service" "danh_order_service" "danh_product_service")
          for SERVICE in ${SERVICES[@]}; do
            FULL_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${SERVICE}:latest" | head -n 1)
            REPO_NAME=$(echo $SERVICE | cut -d'_' -f2-)
            if [ -n "$FULL_NAME" ]; then
              docker tag "$FULL_NAME" $DOCKER_REPO/$REPO_NAME:latest
              docker push $DOCKER_REPO/$REPO_NAME:latest &
            fi
          done
          wait